import React, { useState, useEffect, useRef } from "react";
import { Alert, Button, Skeleton, message, Select, Badge, Card, Typography, Tabs } from "antd";
import { useLocation } from "react-router-dom";
import OpenAI from "openai";
import ChatPanel from "../components/ChatPanel";
import { useOutlineContext, FormData, ChatMessage, parseProjectData, ProjectData } from "../contexts/OutlineContext";
import { 
  MDXEditor, 
  headingsPlugin, 
  listsPlugin, 
  quotePlugin, 
  thematicBreakPlugin,
  markdownShortcutPlugin,
  linkPlugin,
  tablePlugin,
  codeBlockPlugin,
  codeMirrorPlugin,
  toolbarPlugin,
  BoldItalicUnderlineToggles,
  BlockTypeSelect,
  CreateLink,
  InsertTable,
  ListsToggle,
  Separator,
  diffSourcePlugin,
  InsertThematicBreak,
  CodeToggle,
  InsertCodeBlock,
  MDXEditorMethods
} from '@mdxeditor/editor';
import '@mdxeditor/editor/style.css';

const { Title, Text } = Typography;
const { Option } = Select;

// Interface for episode data
interface EpisodeData {
  id: string;
  title: string;
  outline: string;
  chatHistory: ChatMessage[];
  script?: string;
  status: 'outline' | 'generating-script' | 'script-ready';
}

// Chat context types
type ChatContext = 'global' | 'episode';

const EpisodePage: React.FC = () => {
  const location = useLocation();
  const { outlineData } = useOutlineContext();
  
  // Get data from context or location state (for backward compatibility)
  const formData = outlineData.formData || (location.state?.formData as FormData);
  const outlineText = outlineData.outlineText || (location.state?.outlineText as string);
  const episodeCount = location.state?.episodeCount as number || 4;
  
  // Parse project data to get narrative style
  const projectData = formData ? parseProjectData(formData.projectDataJson) : null;
  
  // Narrative style mapping (same as OutlinePage)
  const narrativeStyleMap = {
    'linear': 'Áõ¥Âèô',
    'flashback': 'ÂÄíÂèô', 
    'intercut': 'ÊèíÂèô'
  };
  
  // Episode management state
  const [episodes, setEpisodes] = useState<EpisodeData[]>([]);
  const [selectedEpisodeId, setSelectedEpisodeId] = useState<string>('');
  const [isInitializing, setIsInitializing] = useState(true);
  
  // Chat context state
  const [chatContext, setChatContext] = useState<ChatContext>('global');
  const [globalChatHistory, setGlobalChatHistory] = useState<ChatMessage[]>([]);
  const [isChatProcessing, setIsChatProcessing] = useState(false);
  
  // Script panel state
  const [scriptPanelVisible, setScriptPanelVisible] = useState(false);
  const [selectedScriptId, setSelectedScriptId] = useState<string>('');
  
  // Editor state
  const [editorKey, setEditorKey] = useState(0);
  const editorRef = useRef<MDXEditorMethods>(null);
  
  // Layout state for chat/editor split
  const [chatHeight, setChatHeight] = useState(50); // 50% by default

  // Unified AI API calling function (reused from OutlinePage)
  const callAI = async (prompt: string, apiKey: string, provider: 'openai' | 'deepseek'): Promise<string> => {
    try {
      const apiConfig = provider === 'openai' 
        ? {
            baseURL: undefined,
            model: "gpt-4o"
          }
        : {
            baseURL: 'https://api.deepseek.com',
            model: "deepseek-reasoner"
          };

      const openai = new OpenAI({
        baseURL: apiConfig.baseURL,
        apiKey: apiKey,
        dangerouslyAllowBrowser: true
      });

      const completion = await openai.chat.completions.create({
        messages: [
          { role: "system", content: "You are a professional script writer and creative assistant." },
          { role: "user", content: prompt }
        ],
        model: apiConfig.model,
        max_tokens: 64000,
        temperature: 0.7,
      });

      return completion.choices[0].message.content || "No response generated.";
    } catch (error) {
      console.error(`${provider.charAt(0).toUpperCase() + provider.slice(1)} API Error:`, error);
      throw new Error(`${provider.charAt(0).toUpperCase() + provider.slice(1)} API Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  // Initialize episodes from outline
  const initializeEpisodes = async () => {
    if (!formData || !outlineText) return;

    setIsInitializing(true);
    
    try {
      const prompt = `‰Ω†ÊòØ‰∏Ä‰Ωç‰∏ì‰∏öÂâßÊú¨Âàõ‰ΩúËÄÖÔºåÊìÖÈïøÂü∫‰∫éÁªìÊûÑÈÄªËæë„ÄÅ‰∫∫Áâ©Âä®Êú∫‰∏é‰∏ªÈ¢òÊûÑÂª∫ÂÆåÊï¥‰∏îÂØåÊúâÊàèÂâßÂº†ÂäõÁöÑÂΩ±ËßÜÂâßÊú¨„ÄÇ
ËØ∑Ê†πÊçÆ‰ª•‰∏ãËµÑÊñôÔºåÂ∞ÜÂâßÊú¨Â§ßÁ∫≤ÂàÜËß£‰∏∫ ${episodeCount} ‰∏™ËØ¶ÁªÜÁöÑÂâßÈõÜÔºö

**ÊïÖ‰∫ãÊ¢óÊ¶ÇÔºö** ${projectData?.storySynopsis || 'No synopsis provided'}

**ÁªìÊûÑÂ§ßÁ∫≤‰∏éÂâßÊÉÖÂ§ßÁ∫≤Ôºö** ${outlineText}

**ÂèôËø∞ÊñπÂºèÔºö** ${projectData?.narrativeStyle ? narrativeStyleMap[projectData.narrativeStyle] : 'Áõ¥Âèô'}

**ÂâßÈõÜÂàÜÈÖçËßÑÂàôÔºö**
- Á¨¨1ÈõÜÔºöËµ∑ - ÊïÖ‰∫ãÂºÄÁ´ØÔºå‰∫∫Áâ©‰ªãÁªçÔºåËÉåÊôØËÆæÂÆö
- Á¨¨2ÈõÜÔºöÊâø - ÊøÄÂä±‰∫ã‰ª∂ + ÊâøÊÆµÂèëÂ±ï
- Á¨¨3ÈõÜÔºöËΩ¨ - ËΩ¨Êäò‰∫ã‰ª∂ + ËΩ¨ÊÆµÂÜ≤Á™ÅÂçáÁ∫ß  
- Á¨¨4ÈõÜÔºöÂêà - Âç±Êú∫‰∫ã‰ª∂ + ÂêàÊÆµÈ´òÊΩÆ‰∏éÁªìÂ±Ä

**Âàõ‰ΩúÊåáÂØºÔºö**
ËØ∑ÁªìÂêàÁªìÊûÑÂ§ßÁ∫≤ÁöÑ‰∏É‰∏™Ë¶ÅÁ¥†ÔºàË∫´‰ªΩ„ÄÅÊ¨≤Êúõ„ÄÅÂä®‰Ωú„ÄÅÈóÆÈ¢ò„ÄÅÈòªÈöú„ÄÅÁªìÊûú„ÄÅÊÑè‰πâÔºâÂíåÂâßÊÉÖÂ§ßÁ∫≤Ë°®Ê†ºÁªìÊûÑÔºà‰∫∫Áâ©„ÄÅÂéüÂõ†„ÄÅÂä®‰Ωú„ÄÅÂÜÖÂÆπ„ÄÅÂèçÂ∫îÔºâÊù•Âàõ‰ΩúÊØè‰∏™ÂâßÈõÜ„ÄÇÁ°Æ‰øùÔºö

1. **‰∫∫Áâ©Âä®Êú∫Ê∏ÖÊô∞**ÔºöÊØè‰∏™ËßíËâ≤ÁöÑÂèÇ‰∏éÂä®Êú∫„ÄÅËÉåÊôØÁ´ãÂú∫Ë¶ÅÊòéÁ°Æ
2. **Ë°åÂä®Á≠ñÁï•ÂêàÁêÜ**ÔºöËßíËâ≤ÈááÂèñÁöÑË°åÂä®Á≠ñÁï•Ë¶ÅÁ¨¶ÂêàÂÖ∂Ë∫´‰ªΩÂíåÂä®Êú∫
3. **Ë°å‰∏∫Â±ïÂºÄÂÖ∑‰Ωì**ÔºöÂÖ∑‰ΩìË°å‰∏∫Ë¶ÅËØ¶ÁªÜÊèèËø∞ÔºàÂ¶ÇÊΩúÂÖ•„ÄÅÁ†¥Âùè„ÄÅ‰∫âËæ©„ÄÅÂäùËØ¥Á≠âÔºâ
4. **ÂèçÂ∫îÂêéÊûúÊòéÁ°Æ**ÔºöÊØè‰∏™Ë°å‰∏∫ÈÉΩË¶ÅÊúâÁõ∏Â∫îÁöÑÂâßÊÉÖÂêéÊûú„ÄÅ‰∫∫Áâ©ÂÜ≤Á™ÅÊàñËßÇ‰ºóÊÉÖÁª™ÂèçÈ¶à
5. **ÂÜ≤Á™ÅÈÄêÊ≠•ÂçáÁ∫ß**ÔºöÁ°Æ‰øùÊÉÖËäÇÈÄªËæëËøûË¥ØÔºåÂÜ≤Á™ÅÂú®ÂâßÈõÜÈó¥ÈÄêÊ≠•ÂçáÁ∫ß

{
  "episodes": [
    {
      "title": "Á¨¨1ÈõÜÔºö{ÂâßÈõÜÊ†áÈ¢ò}", 
      "outline": "ÊØè‰∏™Âú∫Ê¨°ÈúÄÊ≥®ÊòéÂú∫ÊôØÁ±ªÂûã„ÄÅÂú∫ÊôØÂêçÁß∞‰∏éÊó∂Èó¥ÔºåÂπ∂ÁÆÄË¶ÅÊèèËø∞Âú∫ÊôØÊ∞õÂõ¥„ÄÅÁéØÂ¢ÉË¶ÅÁ¥†ÂèäÊó∂‰ª£ËÉåÊôØ„ÄÇÊé•ÁùÄÂàóÂá∫Âá∫Âú∫‰∫∫Áâ©ÔºåÊ†áÊòéËßíËâ≤Ë∫´‰ªΩ‰∏éÊÄßÊ†ºÁâπÂæÅ„ÄÇÂØπÁôΩ‰∏éÂä®‰ΩúÈÉ®ÂàÜÈúÄÂåÖÂê´ËßíËâ≤ÂêçÁß∞„ÄÅÊÉÖÁª™ÊàñÂä®‰Ωú„ÄÅÂØπÁôΩÂÜÖÂÆπÂèäÁõ∏ÂÖ≥Âä®‰ΩúÊèèËø∞„ÄÇ‰∏§‰∏™Âú∫Ê¨°‰πãÈó¥ËØ∑Áî®ÊòéÁ°ÆÂàÜÈöîÔºàÂ¶Ç‚Äú---‚ÄùÊàñÊ†áËØÜ‚ÄúÂú∫Ê¨°‰∏Ä‚Äù„ÄÅ‚ÄúÂú∫Ê¨°‰∫å‚ÄùÔºâ„ÄÇÊï¥‰ΩìÂÜÖÂÆπÈúÄ‰ΩìÁé∞ÊØè‰ΩçËßíËâ≤Âú®ËØ≠Ë®ÄÊàñÂä®‰Ωú‰∏äÁöÑ‰∏™ÊÄßË°®Ëææ‰∏éÊÉÖÁª™ÂèòÂåñ„ÄÇ"
    },
    {
      "title": "Á¨¨2ÈõÜÔºö{ÂâßÈõÜÊ†áÈ¢ò}",
      "outline": "ÊØè‰∏™Âú∫Ê¨°ÈúÄÊ≥®ÊòéÂú∫ÊôØÁ±ªÂûã„ÄÅÂú∫ÊôØÂêçÁß∞‰∏éÊó∂Èó¥ÔºåÂπ∂ÁÆÄË¶ÅÊèèËø∞Âú∫ÊôØÊ∞õÂõ¥„ÄÅÁéØÂ¢ÉË¶ÅÁ¥†ÂèäÊó∂‰ª£ËÉåÊôØ„ÄÇÊé•ÁùÄÂàóÂá∫Âá∫Âú∫‰∫∫Áâ©ÔºåÊ†áÊòéËßíËâ≤Ë∫´‰ªΩ‰∏éÊÄßÊ†ºÁâπÂæÅ„ÄÇÂØπÁôΩ‰∏éÂä®‰ΩúÈÉ®ÂàÜÈúÄÂåÖÂê´ËßíËâ≤ÂêçÁß∞„ÄÅÊÉÖÁª™ÊàñÂä®‰Ωú„ÄÅÂØπÁôΩÂÜÖÂÆπÂèäÁõ∏ÂÖ≥Âä®‰ΩúÊèèËø∞„ÄÇ‰∏§‰∏™Âú∫Ê¨°‰πãÈó¥ËØ∑Áî®ÊòéÁ°ÆÂàÜÈöîÔºàÂ¶Ç‚Äú---‚ÄùÊàñÊ†áËØÜ‚ÄúÂú∫Ê¨°‰∏Ä‚Äù„ÄÅ‚ÄúÂú∫Ê¨°‰∫å‚ÄùÔºâ„ÄÇÊï¥‰ΩìÂÜÖÂÆπÈúÄ‰ΩìÁé∞ÊØè‰ΩçËßíËâ≤Âú®ËØ≠Ë®ÄÊàñÂä®‰Ωú‰∏äÁöÑ‰∏™ÊÄßË°®Ëææ‰∏éÊÉÖÁª™ÂèòÂåñ„ÄÇ"
    }
  ]
}

**ÈáçË¶ÅËßÑÂàôÔºö**
1. ‰ªÖËøîÂõû JSON ÂØπË±°Ôºå‰∏çË¶ÅÂÖ∂‰ªñÂÜÖÂÆπ
2. ‰∏•Ê†ºÊåâÁÖßË¶ÅÊ±ÇÂàõÂª∫ ${episodeCount} ‰∏™ÂâßÈõÜ
3. ÊØè‰∏™ÂâßÈõÜÂ§ßÁ∫≤ÂøÖÈ°ªÊòØÂÆåÊï¥ÁöÑÂÆåÊï¥ÂâßÈõÜÂ§ßÁ∫≤Ôºå‰ΩøÁî® markdown Ê†ºÂºè
4. ÂåÖÂê´ËØ¶ÁªÜÁöÑÂú∫ÊôØÊèèËø∞„ÄÅËßíËâ≤ÂèëÂ±ï„ÄÅÂØπËØùÂíåÊÉÖËäÇË¶ÅÁÇπ
5. ‰∏çË¶ÅÊèê‰æõÁÆÄË¶ÅÊëòË¶Å - Êèê‰æõÂÆûÈôÖÁöÑÂÆåÊï¥ÂâßÈõÜÂÜÖÂÆπ
6. ÊØè‰∏™Â§ßÁ∫≤Â∫îËØ•ÊòØÂà∂‰ΩúÂ∞±Áª™‰∏îËØ¶ÁªÜÁöÑ
7. ‰ΩøÁî®ÈÄÇÂΩìÁöÑ markdown Ê†ºÂºèÂíåÊ†áÈ¢òÁªìÊûÑ
8. Âú®ÊâÄÊúâÂâßÈõÜ‰∏≠ÈÅµÂæ™ÊåáÂÆöÁöÑÂèôËø∞ÊñπÂºè (${projectData?.narrativeStyle ? narrativeStyleMap[projectData.narrativeStyle] : 'Áõ¥Âèô'})
9. ÊØè‰∏™ÂâßÈõÜÂøÖÈ°ªÂèçÊò†ÁªìÊûÑË¶ÅÁ¥†ÔºàË∫´‰ªΩ„ÄÅÊ¨≤Êúõ„ÄÅÂä®‰Ωú„ÄÅÈóÆÈ¢ò„ÄÅÈòªÈöú„ÄÅÁªìÊûú„ÄÅÊÑè‰πâÔºâ
10. ËßíËâ≤Âä®Êú∫ÂíåË°åÂä®ÂøÖÈ°ª‰∏éÂâßÊÉÖÂ§ßÁ∫≤Ë°®Ê†ºÁªìÊûÑÔºà‰∫∫Áâ©„ÄÅÂéüÂõ†„ÄÅÂä®‰Ωú„ÄÅÂÜÖÂÆπ„ÄÅÂèçÂ∫îÔºâ‰øùÊåÅ‰∏ÄËá¥
11. Á°Æ‰øùÂÜ≤Á™ÅÂíåËßíËâ≤ÂèëÂ±ïÂú®ÂâßÈõÜÈó¥ÁöÑÈÄªËæëÊé®Ëøõ`;

      console.log(`ü§ñ Calling ${formData.aiProvider} to generate episodes...`);
      console.log(prompt);
      const aiResponse = await callAI(prompt, formData.apiKey, formData.aiProvider);
      
      let parsedResponse: any;
      try {
        parsedResponse = JSON.parse(aiResponse);
      } catch {
        const jsonMatch = aiResponse.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
        if (jsonMatch) {
          parsedResponse = JSON.parse(jsonMatch[1]);
        } else {
          const jsonStart = aiResponse.indexOf('{');
          const jsonEnd = aiResponse.lastIndexOf('}');
          if (jsonStart !== -1 && jsonEnd !== -1) {
            const jsonStr = aiResponse.substring(jsonStart, jsonEnd + 1);
            parsedResponse = JSON.parse(jsonStr);
          } else {
            throw new Error('No valid JSON found');
          }
        }
      }

      if (parsedResponse.episodes && Array.isArray(parsedResponse.episodes)) {
        const newEpisodes: EpisodeData[] = parsedResponse.episodes.map((ep: any, index: number) => ({
          id: `episode-${index + 1}`,
          title: ep.title || `Episode ${index + 1}`,
          outline: ep.outline || '',
          chatHistory: [],
          status: 'outline' as const
        }));

        setEpisodes(newEpisodes);
        if (newEpisodes.length > 0) {
          setSelectedEpisodeId(newEpisodes[0].id);
        }

        setGlobalChatHistory([{
          id: `system-${Date.now()}`,
          type: 'system',
          content: `Episodes generated successfully! ${newEpisodes.length} episodes created. You can now edit individual episodes or make global changes.`,
          timestamp: new Date()
        }]);

        message.success(`${newEpisodes.length} episodes generated successfully!`);
      } else {
        throw new Error('Invalid response format');
      }

    } catch (error) {
      console.error('Episode initialization error:', error);
      message.error(`Failed to generate episodes: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsInitializing(false);
    }
  };

  // Get current episode data
  const currentEpisode = episodes.find(ep => ep.id === selectedEpisodeId);

  // Handle chat messages with context awareness
  const handleChatMessage = async (userMessage: string) => {
    if (!formData?.apiKey || isChatProcessing) return;

    setIsChatProcessing(true);

    try {
      let chatPrompt = '';
      let currentChatHistory: ChatMessage[] = [];

      if (chatContext === 'global') {
        // Global context - can affect all episodes
        currentChatHistory = globalChatHistory;
        chatPrompt = `‰Ω†Ê≠£Âú®ÁÆ°ÁêÜ‰∏Ä‰∏™Â§öÈõÜÂâßÊú¨È°πÁõÆ„ÄÇ‰ª•‰∏ãÊòØÁõ∏ÂÖ≥ËÉåÊôØ‰ø°ÊÅØÔºö



**ÊïÖ‰∫ãÊ¢óÊ¶ÇÔºö** ${projectData?.storySynopsis || 'No synopsis provided'}

**ÁªìÊûÑÂ§ßÁ∫≤‰∏éÂâßÊÉÖÂ§ßÁ∫≤Ôºö** ${outlineText}

ÂèôËø∞ÊñπÂºèÔºö${projectData?.narrativeStyle ? narrativeStyleMap[projectData.narrativeStyle] : 'Áõ¥Âèô'} (${projectData?.narrativeStyle || 'linear'})

ÊâÄÊúâÂΩìÂâçÂâßÈõÜÔºö
${episodes.map((ep, i) => `Á¨¨${i + 1}ÈõÜÔºö${ep.title}
${ep.outline}
---`).join('\n')}

ËÅäÂ§©ÂéÜÂè≤Ôºö
${currentChatHistory.map(msg => `${msg.type}: ${msg.content}`).join('\n')}

Áî®Êà∑ËØ∑Ê±ÇÔºö${userMessage}

ÈáçË¶ÅÔºöËØ∑‰ªÖËøîÂõû‰ª•‰∏ãÊ†ºÂºèÁöÑÊúâÊïàJSONÔºö

{
  "chatReply": "‰Ω†ÂØπÁî®Êà∑ÁöÑÂØπËØùÂõûÂ§ç",
  "episodeUpdates": [
    {
      "id": "episode-1",
      "title": "Êõ¥Êñ∞ÁöÑÊ†áÈ¢òÔºåÂ¶ÇÊó†ÂèòÂåñÂàô‰∏∫null",
      "outline": "ÂÆåÊï¥ÁöÑÂâßÈõÜÂ§ßÁ∫≤ÔºàmarkdownÊ†ºÂºèÔºâÔºåÂ¶ÇÊó†ÂèòÂåñÂàô‰∏∫null"
    }
  ],
  "newEpisodes": [
    {
      "title": "Êñ∞ÂâßÈõÜÊ†áÈ¢ò",
      "outline": "ÂÆåÊï¥ÁöÑÂâßÈõÜÂ§ßÁ∫≤ÔºàmarkdownÊ†ºÂºèÔºâ"
    }
  ],
  "deletedEpisodeIds": ["Ë¶ÅÂà†Èô§ÁöÑÂâßÈõÜid"],
  "updateReason": "‰øÆÊîπÂéüÂõ†ÁöÑÁÆÄË¶ÅËØ¥Êòé"
}

ÂÖ≥ÈîÆËßÑÂàôÔºö
1. ÂØπ‰∫éepisodeUpdatesÔºöÂ¶ÇÊûúÂâßÈõÜÈúÄË¶Å‰øÆÊîπÔºåËØ∑Êèê‰æõÂÆåÊï¥ÁöÑÂâßÈõÜÂ§ßÁ∫≤ÔºåËÄå‰∏çÊòØ‰ªÖÊèê‰æõ‰øÆÊîπÊëòË¶Å
2. ÊØè‰∏™ÂâßÈõÜÂ§ßÁ∫≤Â∫îÂåÖÂê´ËØ¶ÁªÜÁöÑÂú∫ÊôØ„ÄÅËßíËâ≤ÂèëÂ±ï„ÄÅÂØπËØùÂíåÊÉÖËäÇË¶ÅÁÇπ
3. ‰∏çË¶ÅÊèê‰æõÁÆÄË¶ÅÊèèËø∞ - Ë¶ÅÊèê‰æõÂÆûÈôÖÁöÑÂÆåÊï¥ÂâßÈõÜÂÜÖÂÆπ
4. ‰ªÖÂåÖÂê´ÂÆûÈôÖÂèëÁîüÂèòÂåñÁöÑÂâßÈõÜÁöÑepisodeUpdates
5. ‰ªÖÂú®ÊúâÊñ∞ÂâßÈõÜÈúÄË¶ÅÊ∑ªÂä†Êó∂ÂåÖÂê´newEpisodes
6. ‰ªÖÂú®ÈúÄË¶ÅÂà†Èô§ÂâßÈõÜÊó∂ÂåÖÂê´deletedEpisodeIds
7. Â¶ÇÊó†ÈúÄÊõ¥ÊîπÂàôËøîÂõûÁ©∫Êï∞ÁªÑ
8. Âõ†Âà†Èô§ËÄåÊõ¥Êñ∞ÂâßÈõÜÊó∂ÔºåÁ°Æ‰øùËøûÁª≠ÊÄßÂíåÂÆåÊï¥ÊÄß`;

      } else {
        // Episode-specific context
        if (!currentEpisode) {
          message.error('No episode selected');
          return;
        }

        currentChatHistory = currentEpisode.chatHistory;
        const currentOutlineContent = editorRef.current?.getMarkdown() || currentEpisode.outline;

        chatPrompt = `‰Ω†Ê≠£Âú®ÂçèÂä©ÂÆåÂñÑ‰∏Ä‰∏™ÁâπÂÆöÂâßÈõÜ„ÄÇ‰ª•‰∏ãÊòØÁõ∏ÂÖ≥ËÉåÊôØ‰ø°ÊÅØÔºö

**ÊïÖ‰∫ãÊ¢óÊ¶ÇÔºö** ${projectData?.storySynopsis || 'Êú™Êèê‰æõÊïÖ‰∫ãÊ¢óÊ¶Ç'}

**ÁªìÊûÑÂ§ßÁ∫≤‰∏éÂâßÊÉÖÂ§ßÁ∫≤Ôºö** ${outlineText}

ÂÆåÊï¥Á≥ªÂàóËÉåÊôØÔºö
${episodes.map((ep, i) => `Á¨¨${i + 1}ÈõÜÔºö${ep.title}`).join('\n')}

ÂèôËø∞ÊñπÂºèÔºö${projectData?.narrativeStyle ? narrativeStyleMap[projectData.narrativeStyle] : 'Áõ¥Âèô'} (${projectData?.narrativeStyle || 'linear'})

ÂΩìÂâçÂâßÈõÜÔºö${currentEpisode.title}
ÂΩìÂâçÂ§ßÁ∫≤Ôºö
${currentOutlineContent}

ËÅäÂ§©ÂéÜÂè≤Ôºö
${currentChatHistory.map(msg => `${msg.type}: ${msg.content}`).join('\n')}

Áî®Êà∑ËØ∑Ê±ÇÔºö"${userMessage}"

ÈáçË¶ÅÔºöËØ∑‰ªÖËøîÂõû‰ª•‰∏ãÊ†ºÂºèÁöÑÊúâÊïàJSONÔºö

{
  "chatReply": "‰Ω†ÂØπÁî®Êà∑ÁöÑÂØπËØùÂõûÂ§ç",
  "outlineUpdate": "ÂÆåÊï¥ÁöÑÊõ¥Êñ∞ÂêéÂ§ßÁ∫≤ÊñáÊú¨ÔºàmarkdownÊ†ºÂºèÔºâÔºåÂ¶ÇÊó†ÂèòÂåñÂàô‰∏∫null",
  "updateReason": "‰øÆÊîπÂéüÂõ†ÁöÑÁÆÄË¶ÅËØ¥Êòé"
}

ÂÖ≥ÈîÆËßÑÂàôÔºö
1. ‰ªÖËøîÂõûJSONÂØπË±°Ôºå‰∏çË¶ÅÂÖ∂‰ªñÂÜÖÂÆπ
2. ÂØπ‰∫éoutlineUpdateÔºöÊèê‰æõÂÆåÊï¥ÁöÑÂÆåÊï¥ÂâßÈõÜÂ§ßÁ∫≤ÔºåËÄå‰∏çÊòØ‰ªÖÊèê‰æõ‰øÆÊîπÊëòË¶Å
3. ÂåÖÂê´ËØ¶ÁªÜÁöÑÂú∫ÊôØ„ÄÅËßíËâ≤ÂèëÂ±ï„ÄÅÂØπËØùÂíåÊÉÖËäÇË¶ÅÁÇπ
4. ‰∏çË¶ÅÊèê‰æõÁÆÄË¶ÅÊèèËø∞ - Êèê‰æõÂÆûÈôÖÁöÑÂÆåÊï¥ÂâßÈõÜÂÜÖÂÆπ
5. ‰øùÊåÅ‰∏éÊï¥‰ΩìÁ≥ªÂàóÁöÑËøûÁª≠ÊÄß
6. ‰ªÖ‰∏ìÊ≥®‰∫éËøô‰∏™ÁâπÂÆöÂâßÈõÜ
7. ÈÅµÂæ™ÊåáÂÆöÁöÑÂèôËø∞ÊñπÂºè (${projectData?.narrativeStyle ? narrativeStyleMap[projectData.narrativeStyle] : 'Áõ¥Âèô'}) Áî®‰∫éÊâÄÊúâÂÜÖÂÆπ`;
      }

      console.log(`ü§ñ Processing ${chatContext} chat message...`);
      const aiResponse = await callAI(chatPrompt, formData.apiKey, formData.aiProvider);
      
      let parsedResponse: any;
      try {
        parsedResponse = JSON.parse(aiResponse);
      } catch {
        try {
          const jsonMatch = aiResponse.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
          if (jsonMatch) {
            parsedResponse = JSON.parse(jsonMatch[1]);
          } else {
            const jsonStart = aiResponse.indexOf('{');
            const jsonEnd = aiResponse.lastIndexOf('}');
            if (jsonStart !== -1 && jsonEnd !== -1) {
              const jsonStr = aiResponse.substring(jsonStart, jsonEnd + 1);
              parsedResponse = JSON.parse(jsonStr);
            } else {
              throw new Error('No JSON found');
            }
          }
        } catch {
          parsedResponse = {
            chatReply: aiResponse,
            outlineUpdate: null,
            updateReason: "AI response was not in expected JSON format"
          };
        }
      }

      // Add user message to appropriate chat history
      const userChatMessage: ChatMessage = {
        id: `user-${Date.now()}`,
        type: 'user',
        content: userMessage,
        timestamp: new Date()
      };

      // Add AI response to appropriate chat history
      const aiChatMessage: ChatMessage = {
        id: `assistant-${Date.now()}`,
        type: 'assistant',
        content: parsedResponse.chatReply || "I've processed your request.",
        timestamp: new Date()
      };

      if (chatContext === 'global') {
        setGlobalChatHistory(prev => [...prev, userChatMessage, aiChatMessage]);
        
        // Handle global updates
        if (parsedResponse.episodeUpdates && parsedResponse.episodeUpdates.length > 0) {
          setEpisodes(prev => prev.map(ep => {
            const update = parsedResponse.episodeUpdates.find((u: any) => u.id === ep.id);
            if (update) {
              return {
                ...ep,
                title: update.title || ep.title,
                outline: update.outline || ep.outline
              };
            }
            return ep;
          }));
          setEditorKey(prev => prev + 1);
          message.success("Episodes updated successfully!");
        }

        // Handle new episodes
        if (parsedResponse.newEpisodes && parsedResponse.newEpisodes.length > 0) {
          const newEpisodes: EpisodeData[] = parsedResponse.newEpisodes.map((ep: any, index: number) => ({
            id: `episode-${episodes.length + index + 1}`,
            title: ep.title,
            outline: ep.outline,
            chatHistory: [],
            status: 'outline' as const
          }));
          setEpisodes(prev => [...prev, ...newEpisodes]);
          message.success(`${newEpisodes.length} new episodes added!`);
        }

        // Handle deleted episodes
        if (parsedResponse.deletedEpisodeIds && parsedResponse.deletedEpisodeIds.length > 0) {
          setEpisodes(prev => prev.filter(ep => !parsedResponse.deletedEpisodeIds.includes(ep.id)));
          message.success("Episodes removed successfully!");
        }

      } else {
        // Update episode-specific chat history
        setEpisodes(prev => prev.map(ep => {
          if (ep.id === selectedEpisodeId) {
            return {
              ...ep,
              chatHistory: [...ep.chatHistory, userChatMessage, aiChatMessage],
              outline: parsedResponse.outlineUpdate || ep.outline
            };
          }
          return ep;
        }));

        if (parsedResponse.outlineUpdate) {
          setEditorKey(prev => prev + 1);
          message.success("Episode outline updated successfully!");
        }
      }

    } catch (error) {
      console.error('Chat AI Error:', error);
      
      const errorMessage: ChatMessage = {
        id: `error-${Date.now()}`,
        type: 'assistant',
        content: `Sorry, I encountered an error: ${error instanceof Error ? error.message : 'Unknown error'}`,
        timestamp: new Date()
      };
      
      if (chatContext === 'global') {
        setGlobalChatHistory(prev => [...prev, errorMessage]);
      } else if (currentEpisode) {
        setEpisodes(prev => prev.map(ep => {
          if (ep.id === selectedEpisodeId) {
            return {
              ...ep,
              chatHistory: [...ep.chatHistory, errorMessage]
            };
          }
          return ep;
        }));
      }
      
      message.error('Failed to process chat message');
    } finally {
      setIsChatProcessing(false);
    }
  };

  // Generate script for specific episode
  const generateScript = async (episodeId: string) => {
    const episode = episodes.find(ep => ep.id === episodeId);
    if (!episode || !formData?.apiKey) return;

    // Update episode status to generating
    setEpisodes(prev => prev.map(ep => 
      ep.id === episodeId ? { ...ep, status: 'generating-script' as const } : ep
    ));

    try {
      const prompt = `Âü∫‰∫é‰ª•‰∏ãÂ§ßÁ∫≤‰∏∫Ëøô‰∏ÄÈõÜÁîüÊàêÂÆåÊï¥„ÄÅ‰∏ì‰∏öÁöÑÂâßÊú¨„ÄÇ

**ÊïÖ‰∫ãÊ¢óÊ¶ÇÔºö** ${projectData?.storySynopsis || 'Êú™Êèê‰æõÊïÖ‰∫ãÊ¢óÊ¶Ç'}

**ÁªìÊûÑÂ§ßÁ∫≤‰∏éÂâßÊÉÖÂ§ßÁ∫≤Ôºö** ${outlineText}

ÂâßÈõÜÊ†áÈ¢òÔºö${episode.title}

ÂâßÈõÜÂ§ßÁ∫≤Ôºö
${episode.outline}

ÂÆåÊï¥Á≥ªÂàóËÉåÊôØÔºö
${episodes.map((ep, i) => `Á¨¨${i + 1}ÈõÜÔºö${ep.title}`).join('\n')}

ÂèôËø∞ÊñπÂºèÔºö${projectData?.narrativeStyle ? narrativeStyleMap[projectData.narrativeStyle] : 'Áõ¥Âèô'} (${projectData?.narrativeStyle || 'linear'})

ËØ∑ÂàõÂª∫‰∏Ä‰∏™ÂÆåÊï¥ÁöÑÂâßÊú¨ÔºåÂåÖÂê´Ôºö
1. ÈÄÇÂΩìÁöÑÂú∫ÊôØÊ†áÈ¢ò
2. ËßíËâ≤ÂØπËØù
3. Âä®‰ΩúÊèèËø∞
4. ËàûÂè∞ÊåáÁ§∫
5. ‰∏ì‰∏öÊ†ºÂºè
6. ËØ∑ÂÆåÊï¥‰∏î‰∏ì‰∏öÂú∞ÂØπÊØè‰∏™Âú∫ÊôØËøõË°åÊÆµËêΩÂºèÊèèËø∞ÔºåÂ∞ΩÈáèÈÅøÂÖçÁ©∫Ê†ºÁ≠âÊó†ÊÑè‰πâÂ≠óÁ¨¶ÔºåÂÉè‰π¶Á±ç‰∏ÄÊ†∑
7. ËØ∑ËæìÂá∫Á∫¶5000‰∏≠ÊñáÂ≠óÁ¨¶ÁöÑÂÜÖÂÆπ
8. Âú®Êï¥‰∏™ÂâßÊú¨‰∏≠ÈÅµÂæ™ÊåáÂÆöÁöÑÂèôËø∞ÊñπÂºè (${projectData?.narrativeStyle ? narrativeStyleMap[projectData.narrativeStyle] : 'Áõ¥Âèô'})„ÄÇ

ËØ∑‰ª•Á∫ØÊñáÊú¨Ê†ºÂºèËøîÂõûÂÆåÊï¥ÂâßÊú¨„ÄÇ`;

      console.log(`üé¨ Generating script for ${episode.title}...`);
      const scriptContent = await callAI(prompt, formData.apiKey, formData.aiProvider);

      // Update episode with generated script
      setEpisodes(prev => prev.map(ep => 
        ep.id === episodeId ? { 
          ...ep, 
          script: scriptContent,
          status: 'script-ready' as const 
        } : ep
      ));

      setScriptPanelVisible(true);
      setSelectedScriptId(episodeId);
      message.success(`Script generated for ${episode.title}!`);

    } catch (error) {
      console.error('Script generation error:', error);
      message.error(`Failed to generate script: ${error instanceof Error ? error.message : 'Unknown error'}`);
      
      // Reset episode status
      setEpisodes(prev => prev.map(ep => 
        ep.id === episodeId ? { ...ep, status: 'outline' as const } : ep
      ));
    }
  };

  // Initialize episodes when component mounts
  useEffect(() => {
    if (formData && outlineText) {
      initializeEpisodes();
    }
  }, [formData, outlineText, episodeCount]); // initializeEpisodes is defined inline and depends on these props

  // Handle case where user navigates directly without outline data
  if (!formData || !outlineText) {
    return (
      <div style={{ padding: 24 }}>
        <Alert
          message="Missing Outline Data"
          description="Please complete the outline creation process first before managing episodes."
          type="warning"
          showIcon
          action={
            <Button size="small" type="primary" onClick={() => window.location.href = '/outline'}>
              Go to Outline Page
            </Button>
          }
        />
      </div>
    );
  }

  // Get current chat history based on context
  const currentChatHistory = chatContext === 'global' 
    ? globalChatHistory 
    : (currentEpisode?.chatHistory || []);

  return (
    <div style={{ 
      height: '100vh', 
      display: 'flex', 
      flexDirection: 'column',
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
    }}>
      {/* Header Alert */}
      <div style={{ 
        padding: '20px 32px', 
        flexShrink: 0,
        background: 'rgba(255, 255, 255, 0.95)',
        backdropFilter: 'blur(10px)',
        borderBottom: '1px solid rgba(0, 0, 0, 0.06)',
        boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
      }}>
        <Alert
          message={isInitializing ? "üé¨ Creating Episodes..." : "üì∫ Episode Manager"}
          description={
            isInitializing 
              ? `Breaking down your outline into manageable episodes...`
              : `${episodes.length} episodes ready ‚Ä¢ Use global chat for series changes, episode chat for specific edits`
          }
          type={isInitializing ? "info" : "success"}
          showIcon
          style={{
            borderRadius: '12px',
            border: 'none',
            background: isInitializing 
              ? 'linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%)'
              : 'linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%)',
            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)'
          }}
        />
      </div>

      {/* Main Content Area */}
      <div style={{ 
        flex: 1, 
        display: 'flex', 
        minHeight: 0,
        gap: '2px',
        background: 'rgba(0, 0, 0, 0.06)',
        padding: '4px' // Minimal padding for maximum space
      }}>
        {isInitializing ? (
          // Initial loading state
          <div style={{
            flex: 1,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            background: 'rgba(255, 255, 255, 0.95)',
            margin: '4px',
            borderRadius: '12px'
          }}>
            <div style={{ textAlign: 'center' }}>
              <div style={{ 
                fontSize: 64, 
                marginBottom: 20,
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                backgroundClip: 'text'
              }}>üé¨</div>
              <Skeleton active paragraph={{ rows: 2 }} />
            </div>
          </div>
        ) : (
          // Two/Three-panel layout
          <>
            {/* Left Panel - Chat + Episode Navigator */}
            <div style={{ 
              width: '30%', 
              display: 'flex',
              flexDirection: 'column',
              minHeight: 0,
              background: 'rgba(255, 255, 255, 0.95)',
              backdropFilter: 'blur(10px)',
              borderRadius: '12px 0 0 12px',
              margin: '4px 0 4px 4px',
              boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
              overflow: 'hidden'
            }}>
              {/* Chat Context Selector */}
              <div style={{ 
                padding: '16px 20px', 
                borderBottom: '1px solid rgba(0, 0, 0, 0.06)',
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                borderRadius: '12px 0 0 0',
                color: 'white'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <div>
                    <Title level={5} style={{ color: 'white', margin: 0, marginBottom: 4 }}>
                      {chatContext === 'global' ? 'üåç Global Series Chat' : `üìù ${currentEpisode?.title || 'Episode Chat'}`}
                    </Title>
                    <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: 12 }}>
                      {chatContext === 'global' ? 'Manage all episodes' : 'Edit current episode'}
                    </Text>
                  </div>
                  <Select
                    value={chatContext}
                    onChange={setChatContext}
                    style={{ width: 140 }}
                    size="small"
                  >
                    <Option value="global">üåç Global</Option>
                    <Option value="episode">üìù Episode</Option>
                  </Select>
                </div>
              </div>

              {/* Chat Panel */}
              <div style={{ 
                height: `${chatHeight}%`, 
                borderBottom: '1px solid rgba(0, 0, 0, 0.06)',
                position: 'relative'
              }}>
                <ChatPanel
                  chatHistory={currentChatHistory}
                  isProcessing={isChatProcessing}
                  onSendMessage={handleChatMessage}
                  disabled={!formData.apiKey}
                />
                
                {/* Height adjustment controls */}
                <div style={{
                  position: 'absolute',
                  bottom: 0,
                  right: 8,
                  display: 'flex',
                  gap: 4,
                  background: 'rgba(255, 255, 255, 0.9)',
                  borderRadius: '8px 8px 0 0',
                  padding: '4px 8px',
                  fontSize: 12
                }}>
                  <Button 
                    size="small" 
                    type="text" 
                    style={{ padding: '0 4px', height: 20, fontSize: 10 }}
                    onClick={() => setChatHeight(30)}
                    title="Minimize chat"
                  >
                    ‚Üì
                  </Button>
                  <Button 
                    size="small" 
                    type="text" 
                    style={{ padding: '0 4px', height: 20, fontSize: 10 }}
                    onClick={() => setChatHeight(50)}
                    title="Balance view"
                  >
                    ‚ñ£
                  </Button>
                  <Button 
                    size="small" 
                    type="text" 
                    style={{ padding: '0 4px', height: 20, fontSize: 10 }}
                    onClick={() => setChatHeight(70)}
                    title="Maximize chat"
                  >
                    ‚Üë
                  </Button>
                </div>
              </div>

              {/* Episode Navigator */}
              <div style={{ 
                flex: 1,
                display: 'flex',
                flexDirection: 'column',
                minHeight: 0
              }}>
                <div style={{ 
                  padding: '12px 16px', 
                  borderBottom: '1px solid rgba(0, 0, 0, 0.06)',
                  background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                  color: 'white'
                }}>
                  <Title level={5} style={{ color: 'white', margin: 0, marginBottom: 4 }}>
                    Episodes
                  </Title>
                  <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: 12 }}>
                    {episodes.length} total ‚Ä¢ {episodes.filter(ep => ep.script).length} scripts ready
                  </Text>
                </div>
                
                <div style={{ 
                  flex: 1, 
                  padding: '8px', 
                  overflow: 'auto'
                }}>
                  {/* Grid layout for episodes */}
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))',
                    gap: '8px'
                  }}>
                    {episodes.map((episode, index) => (
                      <Card 
                        key={episode.id}
                        size="small"
                        hoverable
                        style={{ 
                          cursor: 'pointer',
                          border: selectedEpisodeId === episode.id ? '2px solid #667eea' : '1px solid #e5e7eb',
                          borderRadius: '8px',
                          background: selectedEpisodeId === episode.id ? '#f0f4ff' : 'white',
                          transition: 'all 0.2s ease'
                        }}
                        onClick={() => setSelectedEpisodeId(episode.id)}
                        bodyStyle={{ padding: '8px' }}
                      >
                        {/* Episode title - truncated */}
                        <div style={{ marginBottom: 6 }}>
                          <Text 
                            strong 
                            style={{ 
                              fontSize: 11, 
                              display: 'block',
                              whiteSpace: 'nowrap',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis'
                            }}
                            title={episode.title}
                          >
                            {episode.title}
                          </Text>
                        </div>
                        
                        {/* Status badge */}
                        <div style={{ marginBottom: 6 }}>
                          <Badge 
                            status={episode.status === 'script-ready' ? 'success' : episode.status === 'generating-script' ? 'processing' : 'default'}
                            text={
                              <Text style={{ fontSize: 9, color: '#666' }}>
                                {episode.status === 'script-ready' ? 'Ready' : 
                                 episode.status === 'generating-script' ? 'Loading...' : 'Outline'}
                              </Text>
                            }
                          />
                        </div>
                        
                        {/* Generate script button */}
                        <Button 
                          size="small"
                          type={episode.script ? "default" : "primary"}
                          block
                          style={{ 
                            fontSize: 9,
                            height: 20,
                            borderRadius: '4px',
                            padding: '0 4px'
                          }}
                          loading={episode.status === 'generating-script'}
                          onClick={(e) => {
                            e.stopPropagation();
                            generateScript(episode.id);
                          }}
                        >
                          {episode.script ? 'Regen' : 'Script'}
                        </Button>
                      </Card>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Middle Panel - Episode Editor Only */}
            <div style={{ 
              flex: scriptPanelVisible ? 1 : 1, 
              display: 'flex',
              flexDirection: 'column',
              minHeight: 0,
              background: 'rgba(255, 255, 255, 0.95)',
              backdropFilter: 'blur(10px)',
              borderRadius: scriptPanelVisible ? '0' : '0 12px 12px 0',
              margin: scriptPanelVisible ? '4px 0' : '4px 4px 4px 0',
              boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
              overflow: 'hidden',
              transition: 'all 0.3s ease'
            }}>
              {/* Editor Header */}
              <div style={{ 
                padding: '16px 20px', 
                borderBottom: '1px solid rgba(0, 0, 0, 0.06)',
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                borderRadius: scriptPanelVisible ? '0' : '0 12px 0 0',
                color: 'white'
              }}>
                <Title level={5} style={{ color: 'white', margin: 0, marginBottom: 4 }}>
                  {currentEpisode ? `üìù ${currentEpisode.title}` : 'üì∫ Episode Editor'}
                </Title>
                <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: 12 }}>
                  {currentEpisode ? 'Edit episode outline and content' : 'Select an episode to start editing'}
                </Text>
              </div>

              {/* Episode Editor - Full Height */}
              <div style={{ 
                flex: 1, 
                padding: 16, 
                overflow: 'auto',
                background: 'linear-gradient(135deg, #fafbfc 0%, #f8fafc 100%)',
                display: 'flex',
                flexDirection: 'column'
              }}>
                {currentEpisode ? (
                  <div style={{
                    background: 'white',
                    borderRadius: '12px',
                    padding: '16px',
                    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)',
                    border: '1px solid rgba(0, 0, 0, 0.06)',
                    flex: 1,
                    overflow: 'auto',
                    display: 'flex',
                    flexDirection: 'column',
                    minHeight: 0
                  }}>
                    <div style={{
                      flex: 1,
                      overflow: 'auto',
                      wordWrap: 'break-word',
                      wordBreak: 'break-word',
                      minHeight: 0
                    }}>
                      <MDXEditor
                        ref={editorRef}
                        key={`episode-editor-${selectedEpisodeId}-${editorKey}`}
                        markdown={currentEpisode.outline}
                        onChange={(value: string) => {
                          setEpisodes(prev => prev.map(ep => 
                            ep.id === selectedEpisodeId ? { ...ep, outline: value } : ep
                          ));
                        }}
                        suppressHtmlProcessing={true}
                        contentEditableClassName="prose"
                      plugins={[
                        headingsPlugin(),
                        listsPlugin(),
                        quotePlugin(),
                        thematicBreakPlugin(),
                        markdownShortcutPlugin(),
                        linkPlugin(),
                        tablePlugin(),
                        codeBlockPlugin({
                          defaultCodeBlockLanguage: ''
                        }),
                        codeMirrorPlugin({
                          codeBlockLanguages: {
                            js: 'JavaScript',
                            css: 'CSS',
                            markdown: 'Markdown',
                            '': 'Plain Text'
                          }
                        }),
                        diffSourcePlugin({
                          viewMode: 'rich-text',
                          diffMarkdown: ''
                        }),
                        toolbarPlugin({
                          toolbarContents: () => (
                            <>
                              <BoldItalicUnderlineToggles />
                              <CodeToggle />
                              <Separator />
                              <BlockTypeSelect />
                              <Separator />
                              <ListsToggle />
                              <Separator />
                              <CreateLink />
                              <InsertTable />
                              <Separator />
                              <InsertCodeBlock />
                              <InsertThematicBreak />
                            </>
                          )
                        })
                                              ]}
                      />
                    </div>
                    </div>
                ) : (
                  <div style={{ 
                    border: '2px dashed #e5e7eb', 
                    padding: 48, 
                    textAlign: 'center', 
                    color: '#6b7280',
                    borderRadius: 16,
                    height: '100%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    background: 'white',
                    flexDirection: 'column'
                  }}>
                    <div style={{ 
                      fontSize: 48, 
                      marginBottom: 16,
                      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                      WebkitBackgroundClip: 'text',
                      WebkitTextFillColor: 'transparent',
                      backgroundClip: 'text'
                    }}>üì∫</div>
                    <div style={{ fontSize: 18, fontWeight: 500, marginBottom: 8 }}>Select an Episode</div>
                    <div style={{ fontSize: 14, color: '#9ca3af' }}>Choose an episode from the left panel to start editing</div>
                  </div>
                )}
              </div>
            </div>

            {/* Right Panel - Script Manager (conditionally visible) */}
            {scriptPanelVisible && (
              <div style={{ 
                width: '30%', 
                display: 'flex',
                flexDirection: 'column',
                minHeight: 0,
                background: 'rgba(255, 255, 255, 0.95)',
                backdropFilter: 'blur(10px)',
                borderRadius: '0 12px 12px 0',
                margin: '4px 4px 4px 0',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
                overflow: 'hidden'
              }}>
                <div style={{ 
                  padding: '16px 20px', 
                  borderBottom: '1px solid rgba(0, 0, 0, 0.06)',
                  background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                  borderRadius: '0 12px 0 0',
                  color: 'white',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between'
                }}>
                  <div>
                    <Title level={4} style={{ color: 'white', margin: 0, marginBottom: 4 }}>
                      Scripts
                    </Title>
                    <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: 12 }}>
                      Generated scripts
                    </Text>
                  </div>
                  <Button 
                    size="small" 
                    type="text" 
                    style={{ color: 'white' }}
                    onClick={() => setScriptPanelVisible(false)}
                  >
                    ‚úï
                  </Button>
                </div>
                
                <div style={{ flex: 1, overflow: 'hidden' }}>
                  <Tabs
                    type="card"
                    size="small"
                    activeKey={selectedScriptId}
                    onChange={setSelectedScriptId}
                    style={{ height: '100%' }}
                    items={episodes
                      .filter(ep => ep.script)
                      .map(ep => ({
                        key: ep.id,
                        label: ep.title.split(':')[0],
                        children: (
                          <div style={{ 
                            padding: 16, 
                            height: 'calc(100vh - 250px)', 
                            overflow: 'auto',
                            background: '#f8fafc'
                          }}>
                            <div style={{
                              background: 'white',
                              padding: 20,
                              borderRadius: 8,
                              fontFamily: 'Monaco, "Courier New", monospace',
                              fontSize: 12,
                              lineHeight: 1.6,
                              whiteSpace: 'pre-wrap',
                              border: '1px solid #e5e7eb'
                            }}>
                              {ep.script}
                            </div>
                            
                            <div style={{ 
                              marginTop: 16, 
                              display: 'flex', 
                              gap: 8, 
                              justifyContent: 'flex-end' 
                            }}>
                              <Button 
                                size="small"
                                onClick={() => {
                                  navigator.clipboard.writeText(ep.script || '');
                                  message.success('Script copied to clipboard!');
                                }}
                              >
                                üìã Copy
                              </Button>
                            </div>
                          </div>
                        )
                      }))
                    }
                  />
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default EpisodePage; 